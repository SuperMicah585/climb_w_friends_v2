// <auto-generated />
using System;
using ClimbWithFriendsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClimbWithFriendsAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250113221723_AddFeatures")]
    partial class AddFeatures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.ActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActivityLogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ClimbId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MapId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ActivityLogId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Attempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttemptId"));

                    b.Property<string>("Attempts")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClimbId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MapToUserToClimbId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AttemptId");

                    b.HasIndex("ClimbId");

                    b.HasIndex("MapId");

                    b.HasIndex("MapToUserToClimbId");

                    b.HasIndex("UserId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Climb", b =>
                {
                    b.Property<int>("ClimbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClimbId"));

                    b.Property<double>("AreaLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("AreaLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("ClimbName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ClimbType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Pitches")
                        .HasColumnType("integer");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ClimbId");

                    b.ToTable("Climbs");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.ClimbChat", b =>
                {
                    b.Property<int>("ClimbChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClimbChatId"));

                    b.Property<int>("ClimbId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MapToFeatureToClimbId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ClimbChatId");

                    b.HasIndex("ClimbId");

                    b.HasIndex("MapId");

                    b.HasIndex("MapToFeatureToClimbId");

                    b.HasIndex("UserId");

                    b.ToTable("ClimbChats");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.ClimbToTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClimbId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClimbId");

                    b.HasIndex("MapId");

                    b.HasIndex("TagId");

                    b.ToTable("ClimbToTags");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FeatureId");

                    b.HasIndex("MapId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.GradeRangeFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FromGrade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MapToUserId")
                        .HasColumnType("integer");

                    b.Property<string>("ToGrade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("MapToUserId");

                    b.ToTable("GradeRangeFilters");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MapId"));

                    b.Property<string>("CreatedAt")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("text");

                    b.HasKey("MapId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToFeatureToClimb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClimbId")
                        .HasColumnType("integer");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("MapToFeatureToClimbs");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("TagId");

                    b.ToTable("MapToTags");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("UserId");

                    b.ToTable("MapToUsers");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToUserToClimb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Auth0ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClimbId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MapToUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClimbId");

                    b.HasIndex("MapId");

                    b.HasIndex("MapToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("MapToUserToClimbs");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("CreatedAt")
                        .HasColumnType("text");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.TagFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MapToUserId")
                        .HasColumnType("integer");

                    b.Property<int>("MaptoTagId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapToUserId");

                    b.HasIndex("MaptoTagId");

                    b.ToTable("TagFilters");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Tick", b =>
                {
                    b.Property<int>("TickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TickId"));

                    b.Property<string>("Attempts")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClimbId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MapToUserToClimbId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TickId");

                    b.HasIndex("ClimbId");

                    b.HasIndex("MapId");

                    b.HasIndex("MapToUserToClimbId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticks");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Auth0ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.UserFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Auth0IdToFilter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int>("MapToUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MapToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFilters");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Attempt", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Climb", "Climb")
                        .WithMany()
                        .HasForeignKey("ClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.MapToUserToClimb", "MapToUserToClimb")
                        .WithMany()
                        .HasForeignKey("MapToUserToClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climb");

                    b.Navigation("Map");

                    b.Navigation("MapToUserToClimb");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.ClimbChat", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Climb", "Climb")
                        .WithMany()
                        .HasForeignKey("ClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.MapToFeatureToClimb", "MapToFeatureToClimb")
                        .WithMany()
                        .HasForeignKey("MapToFeatureToClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climb");

                    b.Navigation("Map");

                    b.Navigation("MapToFeatureToClimb");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.ClimbToTag", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Climb", "Climb")
                        .WithMany("ClimbToTags")
                        .HasForeignKey("ClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.Tag", "Tag")
                        .WithMany("ClimbToTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climb");

                    b.Navigation("Map");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Feature", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.GradeRangeFilter", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Maps")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.MapToUser", "MapToUser")
                        .WithMany()
                        .HasForeignKey("MapToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapToUser");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToFeatureToClimb", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToTag", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany("MapToTags")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.Tag", "Tag")
                        .WithMany("MapToTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToUser", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.MapToUserToClimb", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Climb", "Climb")
                        .WithMany()
                        .HasForeignKey("ClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.MapToUser", "MapToUser")
                        .WithMany()
                        .HasForeignKey("MapToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climb");

                    b.Navigation("Map");

                    b.Navigation("MapToUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.TagFilter", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.MapToUser", "MapToUsers")
                        .WithMany()
                        .HasForeignKey("MapToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.MapToTag", "MapToTags")
                        .WithMany()
                        .HasForeignKey("MaptoTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapToTags");

                    b.Navigation("MapToUsers");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Tick", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.Climb", "Climb")
                        .WithMany()
                        .HasForeignKey("ClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.MapToUserToClimb", "MapToUserToClimb")
                        .WithMany()
                        .HasForeignKey("MapToUserToClimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Climb");

                    b.Navigation("Map");

                    b.Navigation("MapToUserToClimb");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.UserFilter", b =>
                {
                    b.HasOne("ClimbWithFriendsAPI.Data.MapToUser", "MapToUsers")
                        .WithMany()
                        .HasForeignKey("MapToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClimbWithFriendsAPI.Data.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapToUsers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Climb", b =>
                {
                    b.Navigation("ClimbToTags");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Map", b =>
                {
                    b.Navigation("MapToTags");
                });

            modelBuilder.Entity("ClimbWithFriendsAPI.Data.Tag", b =>
                {
                    b.Navigation("ClimbToTags");

                    b.Navigation("MapToTags");
                });
#pragma warning restore 612, 618
        }
    }
}
